{"version":3,"sources":["helpers/fetchData.js","components/StyledWrapper.js","helpers/generateQuote.js","components/StyledButton.js","components/Main.js","App.js","index.js"],"names":["fetchData","url","setFetchedData","fetch","then","res","json","data","StyledWrapper","styled","div","generateQuote","array","setRandomQuote","Math","floor","random","length","StyledButton","button","Main","useState","fetchedData","randomQuote","prevQuote","setPrevQuote","disabled","setDisabled","useEffect","quote","author","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAQeA,EARG,SAACC,EAAKC,GACtBC,MAAMF,GACHG,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLL,EAAeK,O,cCsCNC,EAxCOC,IAAOC,IAAV,guBCMJC,EANO,SAACC,EAAOC,GAG5BA,EADqBD,EADDE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMK,OAAS,MC0BjDC,EA3BMT,IAAOU,OAAV,mhB,OC2DHC,EAvDF,WACX,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBpB,EAApB,KAEA,EAAsCmB,mBAAS,MAA/C,mBAAOE,EAAP,KAAoBV,EAApB,KACA,EAAkCQ,mBAAS,MAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAGAC,qBAAU,WACR5B,EACE,wIACAE,KAED,IAIH0B,qBAAU,WACRjB,EAAcW,EAAaT,KAC1B,CAACS,IAmBJ,OACE,cAAC,EAAD,UACGC,EACC,qCACE,qCAAaA,EAAYM,QACzB,wCAASN,EAAYO,UACrB,cAAC,EAAD,CAAcC,QAlBM,WAE1BN,EAAaF,GACbZ,EAAcW,EAAaT,GAC3Bc,GAAY,IAcN,uBACA,cAAC,EAAD,CAAcD,SAAUA,EAAUK,QAZd,WAX1BN,EAAaF,GACbV,EAAeW,GAYfG,GAAY,IAUN,yBAIA,QCjDKK,MAJf,WACE,OAAO,cAAC,EAAD,KCCTC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0ba393fa.chunk.js","sourcesContent":["const fetchData = (url, setFetchedData) => {\r\n  fetch(url)\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      setFetchedData(data);\r\n    });\r\n};\r\n\r\nexport default fetchData;\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledWrapper = styled.div`\r\n  width: 100%;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 40px 15px;\r\n  position: relative;\r\n\r\n  &::before {\r\n    content: \"YOUR QUOTE\";\r\n    position: absolute;\r\n    top: 20px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    opacity: 0.1;\r\n    font-size: 50px;\r\n    letter-spacing: 8px;\r\n    text-align: center;\r\n  }\r\n\r\n  blockquote {\r\n    font-size: 25px;\r\n    font-weight: 600;\r\n    font-style: italic;\r\n    text-align: center;\r\n    margin-bottom: 30px;\r\n    line-height: 36px;\r\n  }\r\n\r\n  p {\r\n    align-self: flex-end;\r\n    font-size: 22px;\r\n    margin-right: 20px;\r\n    margin-bottom: 30px;\r\n  }\r\n`;\r\n\r\nexport default StyledWrapper;\r\n","// Setting random quote and author of this quote\r\n//Will be trigger on useEffect\r\nconst generateQuote = (array, setRandomQuote) => {\r\n  const randomIndex = Math.floor(Math.random() * array.length - 1);\r\n  const randomObject = array[randomIndex];\r\n  setRandomQuote(randomObject);\r\n};\r\n\r\nexport default generateQuote;\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledButton = styled.button`\r\n  border: none;\r\n  background: white;\r\n  padding: 10px 15px;\r\n  fon-weight: bold;\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  display: block;\r\n  margin-bottom: 25px;\r\n  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\r\n    rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;\r\n  border-radius: 5px;\r\n  transition: all 0.4s;\r\n\r\n  &:hover {\r\n    color: white;\r\n    background: black;\r\n    transform: translateY(-10px);\r\n  }\r\n\r\n  &[disabled]:hover {\r\n    opacity: 0.4;\r\n    background: white;\r\n    color: black;\r\n  }\r\n`;\r\n\r\nexport default StyledButton;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport fetchData from \"../helpers/fetchData\";\r\nimport StyledWrapper from \"./StyledWrapper\";\r\nimport generateQuote from \"../helpers/generateQuote\";\r\nimport StyledButton from \"./StyledButton\";\r\n\r\nconst Main = () => {\r\n  const [fetchedData, setFetchedData] = useState([]);\r\n  //For random object from fetched array\r\n  const [randomQuote, setRandomQuote] = useState(null);\r\n  const [prevQuote, setPrevQuote] = useState(null);\r\n  //For toggling previous button\r\n  const [disabled, setDisabled] = useState(true);\r\n\r\n  //fetching data\r\n  useEffect(() => {\r\n    fetchData(\r\n      \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\",\r\n      setFetchedData\r\n    );\r\n  }, []);\r\n\r\n  //when data is fetched it's generate random object from an array\r\n  //Object is sets on randomQuote\r\n  useEffect(() => {\r\n    generateQuote(fetchedData, setRandomQuote);\r\n  }, [fetchedData]);\r\n\r\n  const showPreviousQuote = () => {\r\n    setPrevQuote(randomQuote);\r\n    setRandomQuote(prevQuote);\r\n  };\r\n\r\n  const handleGetQuoteClick = () => {\r\n    //It sets previous quote, generates new quote, sets prev btn\r\n    setPrevQuote(randomQuote);\r\n    generateQuote(fetchedData, setRandomQuote);\r\n    setDisabled(false);\r\n  };\r\n\r\n  const handlePreviousClick = () => {\r\n    showPreviousQuote();\r\n    setDisabled(true);\r\n  };\r\n\r\n  return (\r\n    <StyledWrapper>\r\n      {randomQuote ? (\r\n        <>\r\n          <blockquote>{randomQuote.quote}</blockquote>\r\n          <p>{`- ${randomQuote.author}`}</p>\r\n          <StyledButton onClick={handleGetQuoteClick}>GET QUOTE</StyledButton>\r\n          <StyledButton disabled={disabled} onClick={handlePreviousClick}>\r\n            Previous\r\n          </StyledButton>\r\n        </>\r\n      ) : null}\r\n    </StyledWrapper>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import \"./App.css\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}